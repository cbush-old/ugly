#ifndef CONTEXT_H
#define CONTEXT_H

#include "gl_type.h"


namespace gl {

class Pipeline;
class Buffer;
class Framebuffer;

class Context {
  public:
    Context();

  public:
    virtual ~Context() =0;
    Context(Context const&) = delete;
    Context& operator=(Context const&) = delete;

  public: // OPENGL VERSION INFO
    /**
     * @brief retrieve the major OpenGL version
     **/
    unsigned major_version() const;

    /**
     * @brief retrieve the minor OpenGL version
     **/
    unsigned minor_version() const;


  public: // CURRENT CONTEXT
    /**
     * @brief make this Context the current Context of this thread.
     **/
    void make_current();

    /**
     * @brief check whether the Context is current on this thread.
     * @return true if the Context is current on this thread.
     **/
    bool current() const;


  public:
    void bind(Pipeline&);

    template<GLenum target>
    void bind(Framebuffer&);


  public:
    void clear();
    void clear(GLbitfield mask);

  public:
    /**
     * @brief set the color buffer value
     **/
    void clear_color(color const&);
    void color_mask(color const&);
    void color_mask(GLuint buf, color const&);

    template<GLenum>
    void cull_face();

    template<GLenum> void enable();
    template<GLenum> void disable();

    template<GLenum> void enable(GLuint);
    template<GLenum> void disable(GLuint);

    template<GLenum> bool is_enabled() const;
    template<GLenum> bool is_enabled(GLuint) const;

    template<GLenum>
    void draw_arrays(int first, GLsizei count);

    template<typename T>
    void clear_depth(T depth);

    void clear_stencil(int);

    void line_width(float);

    template<GLenum param, typename T>
    T get() const;

    /**
     * @brief bind buffer to target
     **/
    template<GLenum target>
    void bind(Buffer& buffer);


  protected:
    class Context_impl* _impl { nullptr };

};


#define INSTANTIATE_ENABLE(MODE) \
  extern template void Context::enable< MODE >(); \
  extern template void Context::disable< MODE >(); \
  extern template bool Context::is_enabled<MODE>() const;

INSTANTIATE_ENABLE(GL_BLEND);
INSTANTIATE_ENABLE(GL_COLOR_LOGIC_OP);
INSTANTIATE_ENABLE(GL_CULL_FACE);
INSTANTIATE_ENABLE(GL_DEPTH_CLAMP);
INSTANTIATE_ENABLE(GL_DEPTH_TEST);
INSTANTIATE_ENABLE(GL_DITHER);
INSTANTIATE_ENABLE(GL_FRAMEBUFFER_SRGB);
INSTANTIATE_ENABLE(GL_LINE_SMOOTH);
INSTANTIATE_ENABLE(GL_MULTISAMPLE);
INSTANTIATE_ENABLE(GL_POLYGON_OFFSET_FILL);
INSTANTIATE_ENABLE(GL_POLYGON_OFFSET_LINE);
INSTANTIATE_ENABLE(GL_POLYGON_OFFSET_POINT);
INSTANTIATE_ENABLE(GL_POLYGON_SMOOTH);
INSTANTIATE_ENABLE(GL_PRIMITIVE_RESTART);
INSTANTIATE_ENABLE(GL_RASTERIZER_DISCARD);
INSTANTIATE_ENABLE(GL_SAMPLE_ALPHA_TO_COVERAGE);
INSTANTIATE_ENABLE(GL_SAMPLE_ALPHA_TO_ONE);
INSTANTIATE_ENABLE(GL_SAMPLE_COVERAGE);
INSTANTIATE_ENABLE(GL_SAMPLE_SHADING);
INSTANTIATE_ENABLE(GL_SAMPLE_MASK);
INSTANTIATE_ENABLE(GL_SCISSOR_TEST);
INSTANTIATE_ENABLE(GL_STENCIL_TEST);
INSTANTIATE_ENABLE(GL_TEXTURE_CUBE_MAP_SEAMLESS);
INSTANTIATE_ENABLE(GL_PROGRAM_POINT_SIZE);
#if GL_4_5
INSTANTIATE_ENABLE(GL_DEBUG_OUTPUT);
INSTANTIATE_ENABLE(GL_DEBUG_OUTPUT_SYNCHRONOUS);
INSTANTIATE_ENABLE(GL_PRIMITIVE_RESTART_FIXED_INDEX);
#endif

#undef INSTANTIATE_ENABLE


#define INSTANTIATE_GET(PARAM, TYPE) extern template TYPE Context::get<PARAM, TYPE>() const

#define INSTANTIATE_GET_BOOL(PARAM) INSTANTIATE_GET(PARAM, bool)
INSTANTIATE_GET_BOOL(GL_BLEND);
INSTANTIATE_GET_BOOL(GL_COLOR_LOGIC_OP);
INSTANTIATE_GET_BOOL(GL_CULL_FACE);
INSTANTIATE_GET_BOOL(GL_DEPTH_TEST);
INSTANTIATE_GET_BOOL(GL_DEPTH_WRITEMASK);
INSTANTIATE_GET_BOOL(GL_DITHER);
INSTANTIATE_GET_BOOL(GL_DOUBLEBUFFER);
INSTANTIATE_GET_BOOL(GL_LINE_SMOOTH);
INSTANTIATE_GET_BOOL(GL_PACK_LSB_FIRST);
INSTANTIATE_GET_BOOL(GL_PACK_SWAP_BYTES);
INSTANTIATE_GET_BOOL(GL_PROGRAM_POINT_SIZE);
INSTANTIATE_GET_BOOL(GL_POLYGON_OFFSET_FILL);
INSTANTIATE_GET_BOOL(GL_POLYGON_OFFSET_LINE);
INSTANTIATE_GET_BOOL(GL_POLYGON_OFFSET_POINT);
INSTANTIATE_GET_BOOL(GL_POLYGON_SMOOTH);
INSTANTIATE_GET_BOOL(GL_SAMPLE_COVERAGE_INVERT);
INSTANTIATE_GET_BOOL(GL_SCISSOR_TEST);
INSTANTIATE_GET_BOOL(GL_SHADER_COMPILER);
INSTANTIATE_GET_BOOL(GL_STENCIL_TEST);
INSTANTIATE_GET_BOOL(GL_STEREO);
INSTANTIATE_GET_BOOL(GL_UNPACK_LSB_FIRST);
INSTANTIATE_GET_BOOL(GL_UNPACK_SWAP_BYTES);

//extern template std::array<GLenum, GL_NUM_COMPRESSED_TEXTURE_FORMATS> Context::get<GL_COMPRESSED_TEXTURE_FORMATS>() const;
//extern template std::array<GLenum, GL_NUM_PROGRAM_BINARY_FORMATS> Context::get<GL_PROGRAM_BINARY_FORMATS>() const;

#define INSTANTIATE_GET_COLOR(PARAM) INSTANTIATE_GET(PARAM, color)
INSTANTIATE_GET_COLOR(GL_BLEND_COLOR);
INSTANTIATE_GET_COLOR(GL_COLOR_CLEAR_VALUE);
INSTANTIATE_GET_COLOR(GL_COLOR_WRITEMASK);


#define INSTANTIATE_GET_ENUM(PARAM) INSTANTIATE_GET(PARAM, GLenum)
INSTANTIATE_GET_ENUM(GL_BLEND_DST_ALPHA);
INSTANTIATE_GET_ENUM(GL_BLEND_DST_RGB);
INSTANTIATE_GET_ENUM(GL_BLEND_EQUATION_RGB);
INSTANTIATE_GET_ENUM(GL_BLEND_EQUATION_ALPHA);
INSTANTIATE_GET_ENUM(GL_BLEND_SRC_ALPHA);
INSTANTIATE_GET_ENUM(GL_BLEND_SRC_RGB);
INSTANTIATE_GET_ENUM(GL_DEPTH_FUNC);
INSTANTIATE_GET_ENUM(GL_DRAW_BUFFER);
//INSTANTIATE_GET_ENUM(GL_DRAW_BUFFER i);
INSTANTIATE_GET_ENUM(GL_FRAGMENT_SHADER_DERIVATIVE_HINT);
INSTANTIATE_GET_ENUM(GL_IMPLEMENTATION_COLOR_READ_FORMAT);
INSTANTIATE_GET_ENUM(GL_IMPLEMENTATION_COLOR_READ_TYPE);
INSTANTIATE_GET_ENUM(GL_LINE_SMOOTH_HINT);
INSTANTIATE_GET_ENUM(GL_LAYER_PROVOKING_VERTEX);
INSTANTIATE_GET_ENUM(GL_LOGIC_OP_MODE);
INSTANTIATE_GET_ENUM(GL_PIXEL_PACK_BUFFER_BINDING);
INSTANTIATE_GET_ENUM(GL_PIXEL_UNPACK_BUFFER_BINDING);
INSTANTIATE_GET_ENUM(GL_PROVOKING_VERTEX);
INSTANTIATE_GET_ENUM(GL_POLYGON_SMOOTH_HINT);
INSTANTIATE_GET_ENUM(GL_READ_BUFFER);
INSTANTIATE_GET_ENUM(GL_STENCIL_BACK_FAIL);
INSTANTIATE_GET_ENUM(GL_STENCIL_BACK_FUNC);
INSTANTIATE_GET_ENUM(GL_STENCIL_BACK_PASS_DEPTH_FAIL);
INSTANTIATE_GET_ENUM(GL_STENCIL_BACK_PASS_DEPTH_PASS);
INSTANTIATE_GET_ENUM(GL_STENCIL_FAIL);
INSTANTIATE_GET_ENUM(GL_STENCIL_FUNC);
INSTANTIATE_GET_ENUM(GL_STENCIL_PASS_DEPTH_FAIL);
INSTANTIATE_GET_ENUM(GL_STENCIL_PASS_DEPTH_PASS);
INSTANTIATE_GET_ENUM(GL_TEXTURE_COMPRESSION_HINT);
INSTANTIATE_GET_ENUM(GL_VIEWPORT_INDEX_PROVOKING_VERTEX);

#define INSTANTIATE_GET_UNSIGNED(PARAM) INSTANTIATE_GET(PARAM, unsigned)
INSTANTIATE_GET_UNSIGNED(GL_CONTEXT_FLAGS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_3D_TEXTURE_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_ARRAY_TEXTURE_LAYERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_CLIP_DISTANCES);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COLOR_TEXTURE_SAMPLES);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMBINED_UNIFORM_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_CUBE_MAP_TEXTURE_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_DEPTH_TEXTURE_SAMPLES);
INSTANTIATE_GET_UNSIGNED(GL_MAX_DRAW_BUFFERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_DUAL_SOURCE_DRAW_BUFFERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_ELEMENTS_INDICES);
INSTANTIATE_GET_UNSIGNED(GL_MAX_ELEMENTS_VERTICES);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAGMENT_INPUT_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAGMENT_UNIFORM_VECTORS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAGMENT_UNIFORM_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_GEOMETRY_INPUT_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_GEOMETRY_OUTPUT_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_GEOMETRY_UNIFORM_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_INTEGER_SAMPLES);
INSTANTIATE_GET_UNSIGNED(GL_MAX_RECTANGLE_TEXTURE_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_RENDERBUFFER_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_SAMPLE_MASK_WORDS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_SERVER_WAIT_TIMEOUT);
INSTANTIATE_GET_UNSIGNED(GL_MAX_TEXTURE_BUFFER_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_TEXTURE_IMAGE_UNITS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_TEXTURE_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_UNIFORM_BUFFER_BINDINGS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_UNIFORM_BLOCK_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VARYING_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VARYING_VECTORS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VARYING_FLOATS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_ATTRIBS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_UNIFORM_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_UNIFORM_VECTORS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_OUTPUT_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_UNIFORM_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VIEWPORT_DIMS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VIEWPORTS);
INSTANTIATE_GET_UNSIGNED(GL_MINOR_VERSION);
INSTANTIATE_GET_UNSIGNED(GL_NUM_COMPRESSED_TEXTURE_FORMATS);
INSTANTIATE_GET_UNSIGNED(GL_NUM_EXTENSIONS);
INSTANTIATE_GET_UNSIGNED(GL_NUM_PROGRAM_BINARY_FORMATS);
INSTANTIATE_GET_UNSIGNED(GL_NUM_SHADER_BINARY_FORMATS);
INSTANTIATE_GET_UNSIGNED(GL_PACK_ALIGNMENT);
INSTANTIATE_GET_UNSIGNED(GL_PACK_IMAGE_HEIGHT);
INSTANTIATE_GET_UNSIGNED(GL_PACK_ROW_LENGTH);
INSTANTIATE_GET_UNSIGNED(GL_PACK_SKIP_IMAGES);
INSTANTIATE_GET_UNSIGNED(GL_PACK_SKIP_PIXELS);
INSTANTIATE_GET_UNSIGNED(GL_PACK_SKIP_ROWS);
INSTANTIATE_GET_UNSIGNED(GL_POINT_FADE_THRESHOLD_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_PRIMITIVE_RESTART_INDEX);
INSTANTIATE_GET_UNSIGNED(GL_POINT_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_POINT_SIZE_GRANULARITY);
INSTANTIATE_GET_UNSIGNED(GL_STENCIL_BACK_VALUE_MASK);
INSTANTIATE_GET_UNSIGNED(GL_STENCIL_BACK_WRITEMASK);
INSTANTIATE_GET_UNSIGNED(GL_STENCIL_CLEAR_VALUE);
INSTANTIATE_GET_UNSIGNED(GL_STENCIL_VALUE_MASK);
INSTANTIATE_GET_UNSIGNED(GL_STENCIL_WRITEMASK);
INSTANTIATE_GET_UNSIGNED(GL_SUBPIXEL_BITS);
INSTANTIATE_GET_UNSIGNED(GL_TRANSFORM_FEEDBACK_BUFFER_START);
INSTANTIATE_GET_UNSIGNED(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT);
INSTANTIATE_GET_UNSIGNED(GL_UNIFORM_BUFFER_START);
INSTANTIATE_GET_UNSIGNED(GL_UNPACK_ALIGNMENT);
INSTANTIATE_GET_UNSIGNED(GL_UNPACK_IMAGE_HEIGHT);
INSTANTIATE_GET_UNSIGNED(GL_UNPACK_ROW_LENGTH);
INSTANTIATE_GET_UNSIGNED(GL_UNPACK_SKIP_IMAGES);
INSTANTIATE_GET_UNSIGNED(GL_UNPACK_SKIP_PIXELS);
INSTANTIATE_GET_UNSIGNED(GL_UNPACK_SKIP_ROWS);
INSTANTIATE_GET_UNSIGNED(GL_VIEWPORT_SUBPIXEL_BITS);
#if GL_4_5
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMBINED_ATOMIC_COUNTERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAGMENT_ATOMIC_COUNTERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAMEBUFFER_WIDTH);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAMEBUFFER_HEIGHT);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAMEBUFFER_LAYERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_FRAMEBUFFER_SAMPLES);
INSTANTIATE_GET_UNSIGNED(GL_MAX_GEOMETRY_ATOMIC_COUNTERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_LABEL_LENGTH);
INSTANTIATE_GET_UNSIGNED(GL_MIN_MAP_BUFFER_ALIGNMENT);
INSTANTIATE_GET_UNSIGNED(GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_UNIFORM_LOCATIONS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_ATOMIC_COUNTERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT);
INSTANTIATE_GET_UNSIGNED(GL_SHADER_STORAGE_BUFFER_START);
INSTANTIATE_GET_UNSIGNED(GL_SHADER_STORAGE_BUFFER_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT);
INSTANTIATE_GET_UNSIGNED(GL_VERTEX_BINDING_OFFSET);
INSTANTIATE_GET_UNSIGNED(GL_VERTEX_BINDING_STRIDE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET);
INSTANTIATE_GET_UNSIGNED(GL_MAX_VERTEX_ATTRIB_BINDINGS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_ELEMENT_INDEX);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_UNIFORM_BLOCKS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_UNIFORM_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_ATOMIC_COUNTERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_WORK_GROUP_COUNT);
INSTANTIATE_GET_UNSIGNED(GL_MAX_COMPUTE_WORK_GROUP_SIZE);
INSTANTIATE_GET_UNSIGNED(GL_MAX_DEBUG_GROUP_STACK_DEPTH);
INSTANTIATE_GET_UNSIGNED(GL_DEBUG_GROUP_STACK_DEPTH);
#endif

#define INSTANTIATE_GET_FLOAT(PARAM) INSTANTIATE_GET(PARAM, float)
INSTANTIATE_GET_FLOAT(GL_LINE_WIDTH);
INSTANTIATE_GET_FLOAT(GL_MAX_TEXTURE_LOD_BIAS);
INSTANTIATE_GET_FLOAT(GL_POLYGON_OFFSET_FACTOR);
INSTANTIATE_GET_FLOAT(GL_POLYGON_OFFSET_UNITS);
INSTANTIATE_GET_FLOAT(GL_SAMPLE_COVERAGE_VALUE);
INSTANTIATE_GET_FLOAT(GL_STENCIL_BACK_REF);
INSTANTIATE_GET_FLOAT(GL_STENCIL_REF);
INSTANTIATE_GET_FLOAT(GL_SMOOTH_LINE_WIDTH_GRANULARITY);


#define INSTANTIATE_GET_RANGE(PARAM) INSTANTIATE_GET(PARAM, range)
INSTANTIATE_GET_RANGE(GL_DEPTH_RANGE);
INSTANTIATE_GET_RANGE(GL_POINT_SIZE_RANGE);
INSTANTIATE_GET_RANGE(GL_SMOOTH_LINE_WIDTH_RANGE);
INSTANTIATE_GET_RANGE(GL_ALIASED_LINE_WIDTH_RANGE);

#define INSTANTIATE_GET_INT(PARAM) INSTANTIATE_GET(PARAM, int32_t)
INSTANTIATE_GET_INT(GL_MAJOR_VERSION);
INSTANTIATE_GET_INT(GL_MAX_PROGRAM_TEXEL_OFFSET);
INSTANTIATE_GET_INT(GL_MIN_PROGRAM_TEXEL_OFFSET);
INSTANTIATE_GET_INT(GL_SAMPLE_BUFFERS);
INSTANTIATE_GET_INT(GL_SAMPLES);
INSTANTIATE_GET_INT(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE);
INSTANTIATE_GET_INT(GL_UNIFORM_BUFFER_SIZE);
INSTANTIATE_GET_INT(GL_DEPTH_CLEAR_VALUE);
#if GL_4_5
INSTANTIATE_GET_INT(GL_VERTEX_BINDING_DIVISOR);
#endif

#define INSTANTIATE_GET_INT64(PARAM) INSTANTIATE_GET(PARAM, int64_t)
INSTANTIATE_GET_INT64(GL_TIMESTAMP);


// Getting names
/*
GL_ACTIVE_TEXTURE 
GL_ARRAY_BUFFER_BINDING 
GL_DISPATCH_INDIRECT_BUFFER_BINDING 
GL_DRAW_FRAMEBUFFER_BINDING 
GL_READ_FRAMEBUFFER_BINDING 
GL_ELEMENT_ARRAY_BUFFER_BINDING 
GL_PROGRAM_PIPELINE_BINDING 
GL_RENDERBUFFER_BINDING 
GL_SAMPLER_BINDING 
GL_SHADER_STORAGE_BUFFER_BINDING 
GL_TEXTURE_BINDING_1D 
GL_TEXTURE_BINDING_1D_ARRAY 
GL_TEXTURE_BINDING_2D 
GL_TEXTURE_BINDING_2D_ARRAY 
GL_TEXTURE_BINDING_2D_MULTISAMPLE 
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 
GL_TEXTURE_BINDING_3D 
GL_TEXTURE_BINDING_BUFFER 
GL_TEXTURE_BINDING_CUBE_MAP 
GL_TEXTURE_BINDING_RECTANGLE 
GL_TEXTURE_BINDING_BUFFER 
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 
GL_UNIFORM_BUFFER_BINDING 
GL_VERTEX_ARRAY_BINDING 
GL_CURRENT_PROGRAM 
*/



extern template void Context::draw_arrays<GL_POINTS>(int, GLsizei);
extern template void Context::draw_arrays<GL_LINE_STRIP>(int, GLsizei);
extern template void Context::draw_arrays<GL_LINE_LOOP>(int, GLsizei);
extern template void Context::draw_arrays<GL_LINES>(int, GLsizei);
extern template void Context::draw_arrays<GL_LINE_STRIP_ADJACENCY>(int, GLsizei);
extern template void Context::draw_arrays<GL_LINES_ADJACENCY>(int, GLsizei);
extern template void Context::draw_arrays<GL_TRIANGLE_STRIP>(int, GLsizei);
extern template void Context::draw_arrays<GL_TRIANGLE_FAN>(int, GLsizei);
extern template void Context::draw_arrays<GL_TRIANGLES>(int, GLsizei);
extern template void Context::draw_arrays<GL_TRIANGLE_STRIP_ADJACENCY>(int, GLsizei);
extern template void Context::draw_arrays<GL_TRIANGLES_ADJACENCY>(int, GLsizei);
extern template void Context::draw_arrays<GL_PATCHES>(int, GLsizei);




/**
 * @brief a Context to be used when Context activity will always happen on the same thread.
 **/
class MonoContext : public Context {
  public:
    MonoContext(void*);
    ~MonoContext() override;
};


/**
 * @brief a Context to be used when Context activity might happen from multiple threads.
 *
 * Each MultiContext is tied to the thread on which it was created, and cannot be used
 * from any other thread. However, you can create another MultiContext on a different
 * thread.
 **/
class MultiContext : public Context {
  public:
    MultiContext(void*);
    ~MultiContext() override;
};


}


#endif
